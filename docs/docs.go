// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/route": {
            "post": {
                "description": "Create a new route",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Create a route",
                "parameters": [
                    {
                        "description": "new route",
                        "name": "route",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/route/{id}": {
            "get": {
                "description": "Get one route by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Get route by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "object"
                }
            }
        },
        "models.Coordinates": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "string",
                    "example": "5642"
                },
                "latitude": {
                    "type": "string",
                    "example": "56.2348"
                },
                "longitude": {
                    "type": "string",
                    "example": "64.1352"
                }
            }
        },
        "models.Mark": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Lexa zachem mi eto delaem"
                },
                "photo": {
                    "type": "string",
                    "example": "Tut mogla bit vasha reklama"
                },
                "point": {
                    "type": "object",
                    "$ref": "#/definitions/models.Coordinates"
                },
                "title": {
                    "type": "string",
                    "example": "Pohod228"
                }
            }
        },
        "models.Route": {
            "type": "object",
            "properties": {
                "best_time_to_go": {
                    "type": "string",
                    "example": "Лето"
                },
                "climb": {
                    "type": "integer",
                    "example": 3800
                },
                "creator_id": {
                    "type": "integer",
                    "example": 5
                },
                "days": {
                    "type": "integer",
                    "example": 5
                },
                "description": {
                    "type": "string",
                    "example": "Lexa dava verstai skoree"
                },
                "difficult": {
                    "type": "integer",
                    "example": 3
                },
                "id": {
                    "type": "integer",
                    "example": 2
                },
                "is_moderate": {
                    "type": "boolean",
                    "example": true
                },
                "marks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Mark"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "Lexa"
                },
                "region": {
                    "type": "string",
                    "example": "Хабаровский край"
                },
                "route": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Coordinates"
                    }
                },
                "start": {
                    "type": "object",
                    "$ref": "#/definitions/models.Coordinates"
                },
                "type": {
                    "type": "string",
                    "example": "Пеший"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{"http"},
	Title:       "Echo Swagger Example API",
	Description: "This is a sample server server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
