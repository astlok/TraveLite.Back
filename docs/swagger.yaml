basePath: /
definitions:
  echo.HTTPError:
    properties:
      message:
        type: object
    type: object
  models.Coordinates:
    properties:
      height:
        example: "5642"
        type: string
      latitude:
        example: "56.2348"
        type: string
      longitude:
        example: "64.1352"
        type: string
    required:
    - height
    - latitude
    - longitude
    type: object
  models.Mark:
    properties:
      description:
        example: Lexa zachem mi eto delaem
        type: string
      photo:
        example: Tut mogla bit vasha reklama
        type: string
      point:
        $ref: '#/definitions/models.Coordinates'
        type: object
      title:
        example: Pohod228
        type: string
    required:
    - point
    - title
    type: object
  models.Route:
    properties:
      best_time_to_go:
        enum:
        - Зима
        - ' Весна'
        - ' Лето'
        - ' Осень'
        example: Лето
        type: string
      climb:
        example: 3800
        type: integer
      creator_id:
        example: 5
        type: integer
      days:
        example: 5
        type: integer
      description:
        example: Lexa dava verstai skoree
        type: string
      difficult:
        example: 3
        type: integer
      distance:
        example: 1488
        type: integer
      id:
        example: 2
        type: integer
      marks:
        items:
          $ref: '#/definitions/models.Mark'
        type: array
      mod_status:
        enum:
        - no status
        - ' pending'
        - ' failed'
        - ' verified'
        example: no status
        type: string
      name:
        example: Lexa
        type: string
      region:
        example: Хабаровский край
        type: string
      route:
        items:
          $ref: '#/definitions/models.Coordinates'
        type: array
      start:
        $ref: '#/definitions/models.Coordinates'
        type: object
      type:
        enum:
        - Пеший
        - ' Горный'
        - ' Водный'
        - ' Альпинизм'
        - ' Велотуризм'
        - ' Бег'
        - ' Мото'
        - ' Авто'
        - ' Скитур'
        - ' Лыжный'
        - ' Горный велотуризм'
        - ' Бездорожье'
        - ' Ски-альпинизм'
        - ' Снегоступы'
        example: Пеший
        type: string
    required:
    - best_time_to_go
    - climb
    - creator_id
    - days
    - difficult
    - distance
    - marks
    - name
    - region
    - route
    - start
    - type
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Echo Swagger Example API
  version: "1.0"
paths:
  /route:
    get:
      description: Get all routes without marks and route line
      parameters:
      - description: 55.745359 37.658375
        in: query
        name: ne
        type: string
      - description: 55.971152 63.507595
        in: query
        name: sw
        type: string
      - default: 0
        description: limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      - description: Route type
        in: query
        name: type
        type: string
      - description: Sort by this, default rate
        in: query
        name: sort
        type: string
      - default: false
        description: sort desc or asc(by default)
        in: query
        name: desc
        type: boolean
      - description: difficult=1,4  FIRST is from SECOND is to
        in: query
        items:
          type: integer
        name: difficult
        type: array
      - description: days=2,6  FIRST is from SECOND is to
        in: query
        items:
          type: integer
        name: days
        type: array
      - description: distance=20,50  FIRST is from SECOND is to
        in: query
        items:
          type: integer
        name: distance
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Route'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get all routes
      tags:
      - Route
    post:
      consumes:
      - application/json
      description: Create a new route
      parameters:
      - description: new route
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/models.Route'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Route'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a route
      tags:
      - Route
  /route/{id}:
    get:
      description: Get one route by id
      parameters:
      - description: Route id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Route'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get route by id
      tags:
      - Route
schemes:
- http
swagger: "2.0"
